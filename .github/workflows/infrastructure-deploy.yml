name: Infrastructure Deploy/Destroy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: deploy or destroy
        required: true
        default: deploy
      files:
        description: space-separated YAML paths (e.g., configs/a.yaml configs/b.yaml)
        required: false
      approve:
        description: yes to auto-apply / non-interactive
        required: false
        default: "no"

permissions:
  contents: write

jobs:
  infra:
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure ADC with personal credentials
        env:
          PERSONAL: ${{ secrets.PERSONAL_GCP_CREDENTIALS }}
        shell: bash
        run: |
          set -euo pipefail
          CREDS="$RUNNER_TEMP/creds.json"
          printf '%s' "$PERSONAL" > "$CREDS"
          echo "GOOGLE_APPLICATION_CREDENTIALS=$CREDS" >> $GITHUB_ENV
          echo "CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=$CREDS" >> $GITHUB_ENV

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Parse intent and files from commit message
        id: parse
        shell: bash
        run: |
          set -euo pipefail
          MSG="${{ github.event.head_commit.message }}"
          ACTION=""
          APPROVE="no"
          FILES=""
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ACTION="${{ github.event.inputs.action }}"
            APPROVE="${{ github.event.inputs.approve }}"
            FILES="${{ github.event.inputs.files }}"
            # normalize 'apply' to 'yes'
            if [[ "$APPROVE" == "apply" ]]; then APPROVE="yes"; fi
          else
            # Clean up the message - remove extra spaces and convert to lowercase
            MSG_CLEAN=$(echo "$MSG" | tr -s ' ' | tr '[:upper:]' '[:lower:]')
            echo "Cleaned message: '$MSG_CLEAN'"
            
            # Check for exact patterns
            if [[ "$MSG_CLEAN" =~ ^deploy[[:space:]]*$ ]]; then
              # "deploy" only - all yaml files, plan only
              ACTION="deploy"
              APPROVE="no"
              RANGE="${{ github.event.before }}..${{ github.sha }}"
              FILES=$(git diff --name-only $RANGE | grep -E '^Configs/.+\.(yaml|yml)$' || true)
            elif [[ "$MSG_CLEAN" =~ ^deploy[[:space:]]+(yes|apply)[[:space:]]*$ ]]; then
              # "deploy yes" - all yaml files, apply
              ACTION="deploy"
              APPROVE="yes"
              RANGE="${{ github.event.before }}..${{ github.sha }}"
              FILES=$(git diff --name-only $RANGE | grep -E '^Configs/.+\.(yaml|yml)$' || true)
            elif [[ "$MSG_CLEAN" =~ ^deploy[[:space:]]+configs/[a-z0-9_./\-]+\.(yaml|yml)[[:space:]]*$ ]]; then
              # "deploy configs/file.yaml" - specific file, plan only
              ACTION="deploy"
              APPROVE="no"
              FILE_LOWER=$(echo "$MSG_CLEAN" | grep -oE 'configs/[a-z0-9_./\-]+\.(yaml|yml)' || true)
              FILES=$(echo "$FILE_LOWER" | sed 's#^configs/#Configs/#')
            elif [[ "$MSG_CLEAN" =~ ^deploy[[:space:]]+configs/[a-z0-9_./\-]+\.(yaml|yml)[[:space:]]+(yes|apply)[[:space:]]*$ ]]; then
              # "deploy configs/file.yaml yes" - specific file, apply
              ACTION="deploy"
              APPROVE="yes"
              FILE_LOWER=$(echo "$MSG_CLEAN" | grep -oE 'configs/[a-z0-9_./\-]+\.(yaml|yml)' || true)
              FILES=$(echo "$FILE_LOWER" | sed 's#^configs/#Configs/#')
            elif [[ "$MSG_CLEAN" =~ ^destroy[[:space:]]*$ ]]; then
              # "destroy" only - all yaml files, plan only
              ACTION="destroy"
              APPROVE="no"
              RANGE="${{ github.event.before }}..${{ github.sha }}"
              FILES=$(git diff --name-only $RANGE | grep -E '^Configs/.+\.(yaml|yml)$' || true)
            elif [[ "$MSG_CLEAN" =~ ^destroy[[:space:]]+(yes|apply)[[:space:]]*$ ]]; then
              # "destroy yes" - all yaml files, apply
              ACTION="destroy"
              APPROVE="yes"
              RANGE="${{ github.event.before }}..${{ github.sha }}"
              FILES=$(git diff --name-only $RANGE | grep -E '^Configs/.+\.(yaml|yml)$' || true)
            elif [[ "$MSG_CLEAN" =~ ^destroy[[:space:]]+configs/[a-z0-9_./\-]+\.(yaml|yml)[[:space:]]*$ ]]; then
              # "destroy configs/file.yaml" - specific file, plan only
              ACTION="destroy"
              APPROVE="no"
              FILE_LOWER=$(echo "$MSG_CLEAN" | grep -oE 'configs/[a-z0-9_./\-]+\.(yaml|yml)' || true)
              FILES=$(echo "$FILE_LOWER" | sed 's#^configs/#Configs/#')
            elif [[ "$MSG_CLEAN" =~ ^destroy[[:space:]]+configs/[a-z0-9_./\-]+\.(yaml|yml)[[:space:]]+(yes|apply).*$ ]]; then
              # "destroy configs/file.yaml yes" - specific file, apply
              ACTION="destroy"
              APPROVE="yes"
              FILE_LOWER=$(echo "$MSG_CLEAN" | grep -oE 'configs/[a-z0-9_./\-]+\.(yaml|yml)' || true)
              FILES=$(echo "$FILE_LOWER" | sed 's#^configs/#Configs/#')
            else
              # No valid pattern found
              ACTION=""
              APPROVE="no"
              FILES=""
            fi
          fi
          echo "action=$ACTION" >> $GITHUB_OUTPUT
          echo "approve=$APPROVE" >> $GITHUB_OUTPUT
          echo "files=$FILES" >> $GITHUB_OUTPUT
          printf "Parsed action='%s' approve='%s' files=\n%s\n" "$ACTION" "$APPROVE" "$FILES"

      - name: Short-circuit if no action detected
        if: steps.parse.outputs.action == ''
        run: |
          echo "No deploy/destroy action detected in commit. Skipping."
          exit 0

      - name: Short-circuit if no config files detected
        if: steps.parse.outputs.files == ''
        run: |
          echo "No configs/*.yaml detected in commit or workflow inputs. Skipping."
          exit 0

      - name: Show plan-only note for destroy without approve
        if: steps.parse.outputs.action == 'destroy' && steps.parse.outputs.approve != 'yes'
        run: |
          echo "Destroy will run in plan-only mode (no actual destruction)."

      - name: Run deploy (plan-only unless approve=yes)
        if: steps.parse.outputs.action == 'deploy'
        shell: bash
        run: |
          set -euo pipefail
          FILES=( ${{ steps.parse.outputs.files }} )
          for f in "${FILES[@]}"; do
            echo "Running deploy for $f"
            if [[ "${{ steps.parse.outputs.approve }}" == "yes" ]]; then
              echo yes | python Scripts/deploy.py "$f"
            else
              # Let the script generate files; ignore its plan failure if creds missing
              echo no | python Scripts/deploy.py "$f" || true
              # Best-effort plan without creds
              pid=$(python -c "import sys,yaml; d=yaml.safe_load(open(sys.argv[1])) or {}; print((d.get('project') or {}).get('project_id',''))" "$f")
              if [[ -n "$pid" && -d "$pid" ]]; then
                echo "Showing plan (no creds) for $pid"
                terraform -chdir="$pid" init -input=false || true
                terraform -chdir="$pid" plan -refresh=false -no-color -input=false || true
              else
                echo "Could not determine project directory to show plan"
              fi
            fi
          done

      - name: Run destroy (plan-only unless approve=yes)
        if: steps.parse.outputs.action == 'destroy'
        shell: bash
        run: |
          set -euo pipefail
          FILES=( ${{ steps.parse.outputs.files }} )
          for f in "${FILES[@]}"; do
            echo "Running destroy for $f"
            if [[ "${{ steps.parse.outputs.approve }}" == "yes" ]]; then
              echo yes | python Scripts/destroy.py "$f"
            else
              # Plan-only destroy; ignore script failure if creds missing
              echo no | python Scripts/destroy.py "$f" || true
              pid=$(python -c "import sys,yaml; d=yaml.safe_load(open(sys.argv[1])) or {}; print((d.get('project') or {}).get('project_id',''))" "$f")
              if [[ -n "$pid" && -d "$pid" ]]; then
                echo "Showing destroy plan (no creds) for $pid"
                terraform -chdir="$pid" init -input=false || true
                terraform -chdir="$pid" plan -destroy -refresh=false -no-color -input=false || true
              else
                echo "Could not determine project directory to show destroy plan"
              fi
            fi
          done

      - name: Notify Slack (success)
        if: success()
        shell: bash
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          if [[ -z "${SLACK_WEBHOOK_URL:-}" ]]; then exit 0; fi
          ACTION='${{ steps.parse.outputs.action }}'
          APPROVE='${{ steps.parse.outputs.approve }}'
          FILES='${{ steps.parse.outputs.files }}'
          REPO='${{ github.repository }}'
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          MSG="✅ Infra ${ACTION} (approve=${APPROVE}) succeeded for ${FILES} in ${REPO}. <${RUN_URL}|Run details>"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"${MSG//\"/\\\"}\"}" "$SLACK_WEBHOOK_URL" || true

      - name: Notify Slack (failure)
        if: failure()
        shell: bash
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          if [[ -z "${SLACK_WEBHOOK_URL:-}" ]]; then exit 0; fi
          ACTION='${{ steps.parse.outputs.action }}'
          APPROVE='${{ steps.parse.outputs.approve }}'
          FILES='${{ steps.parse.outputs.files }}'
          REPO='${{ github.repository }}'
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          MSG="❌ Infra ${ACTION} (approve=${APPROVE}) failed for ${FILES} in ${REPO}. <${RUN_URL}|Run details>"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"${MSG//\"/\\\"}\"}" "$SLACK_WEBHOOK_URL" || true
